using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace EL_DC_Charger.CRC
{
    public class CRC16
    {
        static byte[] CCITT_Tab_H = new byte[]{
            0x00,(byte)0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,
            0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte)0x81,0x40,0x00,(byte)0xC1,(byte)0x81,0x40,0x01,(byte) 0xC0,
            (byte)0x80,0x41,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,
            (byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x01,(byte) 0xC0,(byte) 0x80,0x41,
            0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x00,(byte) 0xC1,(byte) 0x81,
            0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x01,(byte) 0xC0,
            (byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x01,
            (byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,
            0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,
            0x40,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,
            (byte) 0x80,0x41,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,
            (byte) 0xC0,(byte) 0x80,0x41,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,
            0x00,(byte) 0xC1,(byte) 0x81,0x40,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,
            0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,
            (byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x01,
            (byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,
            0x00,(byte) 0xC1,(byte) 0x81,0x40,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x01,(byte) 0xC0,(byte) 0x80,0x41,0x00,(byte) 0xC1,(byte) 0x81,
            0x40
        };

        static byte[] CCITT_Tab_L = new byte[]{
            0x00,(byte) 0xC0,(byte) 0xC1,0x01,(byte) 0xC3,0x03,0x02,(byte) 0xC2,(byte) 0xC6,0x06,0x07,(byte) 0xC7,0x05,(byte) 0xC5,(byte) 0xC4,
            0x04,(byte) 0xCC,0x0C,0x0D,(byte) 0xCD,0x0F,(byte) 0xCF,(byte) 0xCE,0x0E,0x0A,(byte) 0xCA,(byte) 0xCB,0x0B,(byte) 0xC9,0x09,
            0x08,(byte) 0xC8,(byte) 0xD8,0x18,0x19,(byte) 0xD9,0x1B,(byte) 0xDB,(byte) 0xDA,0x1A,0x1E,(byte) 0xDE,(byte) 0xDF,0x1F,(byte) 0xDD,
            0x1D,0x1C,(byte) 0xDC,0x14,(byte) 0xD4,(byte) 0xD5,0x15,(byte) 0xD7,0x17,0x16,(byte) 0xD6,(byte) 0xD2,0x12,0x13,(byte) 0xD3,
            0x11,(byte) 0xD1,(byte) 0xD0,0x10,(byte) 0xF0,0x30,0x31,(byte) 0xF1,0x33,(byte) 0xF3,(byte) 0xF2,0x32,0x36,(byte) 0xF6,(byte) 0xF7,
            0x37,(byte) 0xF5,0x35,0x34,(byte) 0xF4,0x3C,(byte) 0xFC,(byte) 0xFD,0x3D,(byte) 0xFF,0x3F,0x3E,(byte) 0xFE,(byte) 0xFA,0x3A,
            0x3B,(byte) 0xFB,0x39,(byte) 0xF9,(byte) 0xF8,0x38,0x28,(byte) 0xE8,(byte) 0xE9,0x29,(byte) 0xEB,0x2B,0x2A,(byte) 0xEA,(byte) 0xEE,
            0x2E,0x2F,(byte) 0xEF,0x2D,(byte) 0xED,(byte) 0xEC,0x2C,(byte) 0xE4,0x24,0x25,(byte) 0xE5,0x27,(byte) 0xE7,(byte) 0xE6,0x26,
            0x22,(byte) 0xE2,(byte) 0xE3,0x23,(byte) 0xE1,0x21,0x20,(byte) 0xE0,(byte) 0xA0,0x60,0x61,(byte) 0xA1,0x63,(byte) 0xA3,(byte) 0xA2,
            0x62,0x66,(byte) 0xA6,(byte) 0xA7,0x67,(byte) 0xA5,0x65,0x64,(byte) 0xA4,0x6C,(byte) 0xAC,(byte) 0xAD,0x6D,(byte) 0xAF,0x6F,
            0x6E,(byte) 0xAE,(byte) 0xAA,0x6A,0x6B,(byte) 0xAB,0x69,(byte) 0xA9,(byte) 0xA8,0x68,0x78,(byte) 0xB8,(byte) 0xB9,0x79,(byte) 0xBB,
            0x7B,0x7A,(byte) 0xBA,(byte) 0xBE,0x7E,0x7F,(byte) 0xBF,0x7D,(byte) 0xBD,(byte) 0xBC,0x7C,(byte) 0xB4,0x74,0x75,(byte) 0xB5,
            0x77,(byte) 0xB7,(byte) 0xB6,0x76,0x72,(byte) 0xB2,(byte) 0xB3,0x73,(byte) 0xB1,0x71,0x70,(byte) 0xB0,0x50,(byte) 0x90,(byte) 0x91,
            0x51,(byte) 0x93,0x53,0x52,(byte) 0x92,(byte) 0x96,0x56,0x57,(byte) 0x97,0x55,(byte) 0x95,(byte) 0x94,0x54,(byte) 0x9C,0x5C,
            0x5D,(byte) 0x9D,0x5F,(byte) 0x9F,(byte) 0x9E,0x5E,0x5A,(byte) 0x9A,(byte) 0x9B,0x5B,(byte) 0x99,0x59,0x58,(byte) 0x98,(byte) 0x88,
            0x48,0x49,(byte) 0x89,0x4B,(byte) 0x8B,(byte) 0x8A,0x4A,0x4E,(byte) 0x8E,(byte) 0x8F,0x4F,(byte) 0x8D,0x4D,0x4C,(byte) 0x8C,
            0x44,(byte) 0x84,(byte) 0x85,0x45,(byte) 0x87,0x47,0x46,(byte) 0x86,(byte) 0x82,0x42,0x43,(byte) 0x83,0x41,(byte) 0x81,(byte) 0x80,
            0x40
        };


        public static bool CRC16_CCITT(byte[] ptr)
        {
            int i, xtmp = 0;
            byte Crc_Hi = (byte)0xff, Crc_Low = (byte)0xff;

            for (i = 1; i < ptr.Length - 3; i++)
            {
                xtmp = (byte)(Crc_Hi ^ ptr[i]);
                if (xtmp < 0)
                    xtmp = xtmp + 256;

                Crc_Hi = (byte)(Crc_Low ^ CCITT_Tab_H[xtmp]);
                Crc_Low = CCITT_Tab_L[xtmp];
            }


            if (ptr[ptr.Length - 3] == Crc_Hi && ptr[ptr.Length - 2] == Crc_Low)
                return true;
            return false;
        }

        public static void setCRC16_CCITT(ref byte[] ptr)
        {
            byte[] crc = getCRC16_CCITT(ptr);

            ptr[ptr.Length - 3] = crc[0];
            ptr[ptr.Length - 2] = crc[1];
        }

        public static byte[] getCRC16_CCITT(byte[] ptr)
        {
            int i, xtmp = 0;
            byte Crc_Hi = (byte)0xff, Crc_Low = (byte)0xff;

            for (i = 1; i < ptr.Length - 3; i++)
            {
                xtmp = (byte)(Crc_Hi ^ ptr[i]);
                if (xtmp < 0)
                    xtmp = xtmp + 0x000000ff;

                Crc_Hi = (byte)(Crc_Low ^ CCITT_Tab_H[xtmp]);
                Crc_Low = CCITT_Tab_L[xtmp];
            }

            return new byte[] { Crc_Hi, Crc_Low };
        }

        public static byte[] getCRC16_CCITT(byte[] ptr, int startIndexArray, int endIndex)
        {
            int i, xtmp = 0;
            byte Crc_Hi = (byte)0xff, Crc_Low = (byte)0xff;

            for (i = startIndexArray + 1; i < endIndex - 3; i++)
            {
                xtmp = (byte)(Crc_Hi ^ ptr[i]);
                if (xtmp < 0)
                    xtmp = xtmp + 256;

                Crc_Hi = (byte)(Crc_Low ^ CCITT_Tab_H[xtmp]);
                Crc_Low = CCITT_Tab_L[xtmp];
            }


            return new byte[] { Crc_Hi, Crc_Low };
        }



        public static bool CRC16_CCITT(byte[] ptr, int startIndexArray, int endIndex)
        {
            int i, xtmp = 0;
            byte Crc_Hi = (byte)0xff, Crc_Low = (byte)0xff;

            for (i = startIndexArray + 1; i < endIndex - 3; i++)
            {
                xtmp = (byte)(Crc_Hi ^ ptr[i]);
                if (xtmp < 0)
                    xtmp = xtmp + 256;

                Crc_Hi = (byte)(Crc_Low ^ CCITT_Tab_H[xtmp]);
                Crc_Low = CCITT_Tab_L[xtmp];
            }

            if (ptr[ptr.Length - 3] == Crc_Hi && ptr[ptr.Length - 2] == Crc_Low)
                return true;
            return false;
        }
    }

    public class CRC16_2 // CRC-16/MODBUS
    {
        private readonly static ushort[] wCRCTable = {
            0X0000, 0XC0C1, 0XC181, 0X0140, 0XC301, 0X03C0, 0X0280, 0XC241, 0XC601, 0X06C0,
            0X0780, 0XC741, 0X0500, 0XC5C1, 0XC481, 0X0440, 0XCC01, 0X0CC0, 0X0D80, 0XCD41,
            0X0F00, 0XCFC1, 0XCE81, 0X0E40, 0X0A00, 0XCAC1, 0XCB81, 0X0B40, 0XC901, 0X09C0,
            0X0880, 0XC841, 0XD801, 0X18C0, 0X1980, 0XD941, 0X1B00, 0XDBC1, 0XDA81, 0X1A40,
            0X1E00, 0XDEC1, 0XDF81, 0X1F40, 0XDD01, 0X1DC0, 0X1C80, 0XDC41, 0X1400, 0XD4C1,
            0XD581, 0X1540, 0XD701, 0X17C0, 0X1680, 0XD641, 0XD201, 0X12C0, 0X1380, 0XD341,
            0X1100, 0XD1C1, 0XD081, 0X1040, 0XF001, 0X30C0, 0X3180, 0XF141, 0X3300, 0XF3C1,
            0XF281, 0X3240, 0X3600, 0XF6C1, 0XF781, 0X3740, 0XF501, 0X35C0, 0X3480, 0XF441,
            0X3C00, 0XFCC1, 0XFD81, 0X3D40, 0XFF01, 0X3FC0, 0X3E80, 0XFE41, 0XFA01, 0X3AC0,
            0X3B80, 0XFB41, 0X3900, 0XF9C1, 0XF881, 0X3840, 0X2800, 0XE8C1, 0XE981, 0X2940,
            0XEB01, 0X2BC0, 0X2A80, 0XEA41, 0XEE01, 0X2EC0, 0X2F80, 0XEF41, 0X2D00, 0XEDC1,
            0XEC81, 0X2C40, 0XE401, 0X24C0, 0X2580, 0XE541, 0X2700, 0XE7C1, 0XE681, 0X2640,
            0X2200, 0XE2C1, 0XE381, 0X2340, 0XE101, 0X21C0, 0X2080, 0XE041, 0XA001, 0X60C0,
            0X6180, 0XA141, 0X6300, 0XA3C1, 0XA281, 0X6240, 0X6600, 0XA6C1, 0XA781, 0X6740,
            0XA501, 0X65C0, 0X6480, 0XA441, 0X6C00, 0XACC1, 0XAD81, 0X6D40, 0XAF01, 0X6FC0,
            0X6E80, 0XAE41, 0XAA01, 0X6AC0, 0X6B80, 0XAB41, 0X6900, 0XA9C1, 0XA881, 0X6840,
            0X7800, 0XB8C1, 0XB981, 0X7940, 0XBB01, 0X7BC0, 0X7A80, 0XBA41, 0XBE01, 0X7EC0,
            0X7F80, 0XBF41, 0X7D00, 0XBDC1, 0XBC81, 0X7C40, 0XB401, 0X74C0, 0X7580, 0XB541,
            0X7700, 0XB7C1, 0XB681, 0X7640, 0X7200, 0XB2C1, 0XB381, 0X7340, 0XB101, 0X71C0,
            0X7080, 0XB041, 0X5000, 0X90C1, 0X9181, 0X5140, 0X9301, 0X53C0, 0X5280, 0X9241,
            0X9601, 0X56C0, 0X5780, 0X9741, 0X5500, 0X95C1, 0X9481, 0X5440, 0X9C01, 0X5CC0,
            0X5D80, 0X9D41, 0X5F00, 0X9FC1, 0X9E81, 0X5E40, 0X5A00, 0X9AC1, 0X9B81, 0X5B40,
            0X9901, 0X59C0, 0X5880, 0X9841, 0X8801, 0X48C0, 0X4980, 0X8941, 0X4B00, 0X8BC1,
            0X8A81, 0X4A40, 0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
            0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641, 0X8201, 0X42C0,
            0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040
        };

        public static byte[] fn_makeCRC16_byte(byte[] bytes)
        { // CRC-16/MODBUS
            int icrc = 0xFFFF;
            for (int i = 0; i < bytes.Length; i++)
            {
                icrc = (icrc >> 8) ^ wCRCTable[(icrc ^ bytes[i]) & 0xff];
            }
            byte[] ret = BitConverter.GetBytes(icrc);

            return ret;
        }
    }

    public static class CRC16_3 // CRC-16/AUG-CCITT
    {
        public static UInt16[] cp_Crc16_CCITT = {
            0x0000,0x1021, 0x2042,0x3063,0x4084,0x50A5,0x60C6,0x70E7,
            0x8108,0x9129,0xA14A,0xB16B,0xC18C,0xD1AD,0xE1CE,0xF1EF,
            0x1231,0x0210,0x3273,0x2252,0x52B5,0x4294,0x72F7,0x62D6,
            0x9339,0x8318,0xB37B,0xA35A,0xD3BD,0xC39C,0xF3FF,0xE3DE,
            0x2462,0x3443,0x0420,0x1401,0x64E6,0x74C7,0x44A4,0x5485,
            0xA56A,0xB54B,0x8528,0x9509,0xE5EE,0xF5CF,0xC5AC,0xD58D,
            0x3653,0x2672,0x1611,0x0630,0x76D7,0x66F6,0x5695,0x46B4,
            0xB75B,0xA77A,0x9719,0x8738,0xF7DF,0xE7FE,0xD79D,0xC7BC,
            0x48C4,0x58E5,0x6886,0x78A7,0x0840,0x1861,0x2802,0x3823,
            0xC9CC,0xD9ED,0xE98E,0xF9AF,0x8948,0x9969,0xA90A,0xB92B,
            0x5AF5,0x4AD4,0x7AB7,0x6A96,0x1A71,0x0A50,0x3A33,0x2A12,
            0xDBFD,0xCBDC,0xFBBF,0xEB9E,0x9B79,0x8B58,0xBB3B,0xAB1A,
            0x6CA6,0x7C87,0x4CE4,0x5CC5,0x2C22,0x3C03,0x0C60,0x1C41,
            0xEDAE,0xFD8F,0xCDEC,0xDDCD,0xAD2A,0xBD0B,0x8D68,0x9D49,
            0x7E97,0x6EB6,0x5ED5,0x4EF4,0x3E13,0x2E32,0x1E51,0x0E70,
            0xFF9F,0xEFBE,0xDFDD,0xCFFC,0xBF1B,0xAF3A,0x9F59,0x8F78,
            0x9188,0x81A9,0xB1CA,0xA1EB,0xD10C,0xC12D,0xF14E,0xE16F,
            0x1080,0x00A1,0x30C2,0x20E3,0x5004,0x4025,0x7046,0x6067,
            0x83B9,0x9398,0xA3FB,0xB3DA,0xC33D,0xD31C,0xE37F,0xF35E,
            0x02B1,0x1290,0x22F3,0x32D2,0x4235,0x5214,0x6277,0x7256,
            0xB5EA,0xA5CB,0x95A8,0x8589,0xF56E,0xE54F,0xD52C,0xC50D,
            0x34E2,0x24C3,0x14A0,0x0481,0x7466,0x6447,0x5424,0x4405,
            0xA7DB,0xB7FA,0x8799,0x97B8,0xE75F,0xF77E,0xC71D,0xD73C,
            0x26D3,0x36F2,0x0691,0x16B0,0x6657,0x7676,0x4615,0x5634,
            0xD94C,0xC96D,0xF90E,0xE92F,0x99C8,0x89E9,0xB98A,0xA9AB,
            0x5844,0x4865,0x7806,0x6827,0x18C0,0x08E1,0x3882,0x28A3,
            0xCB7D,0xDB5C,0xEB3F,0xFB1E,0x8BF9,0x9BD8,0xABBB,0xBB9A,
            0x4A75,0x5A54,0x6A37,0x7A16,0x0AF1,0x1AD0,0x2AB3,0x3A92,
            0xFD2E,0xED0F,0xDD6C,0xCD4D,0xBDAA,0xAD8B,0x9DE8,0x8DC9,
            0x7C26,0x6C07,0x5C64,0x4C45,0x3CA2,0x2C83,0x1CE0,0x0CC1,
            0xEF1F,0xFF3E,0xCF5D,0xDF7C,0xAF9B,0xBFBA,0x8FD9,0x9FF8,
            0x6E17,0x7E36,0x4E55,0x5E74,0x2E93,0x3EB2,0x0ED1,0x1EF0,
        };

        const ushort polynomial = 0xA001;
        static readonly ushort[] table = new ushort[256];

        public static ushort ComputeChecksum(byte[] bytes)
        {
            ushort crc = 0;
            for (int i = 0; i < bytes.Length; ++i)
            {
                byte index = (byte)(crc ^ bytes[i]);
                crc = (ushort)((crc >> 8) ^ table[index]);
            }
            return crc;
        }
        public static ushort CRC16CCITT(byte[] bytes, ushort initialValue)
        {
            const ushort poly = 4129;
            ushort[] table = new ushort[256];
            ushort temp, a;
            ushort crc = initialValue;
            for (int i = 0; i < table.Length; ++i)
            {
                temp = 0;
                a = (ushort)(i << 8);
                for (int j = 0; j < 8; ++j)
                {
                    if (((temp ^ a) & 0x8000) != 0)
                        temp = (ushort)((temp << 1) ^ poly);
                    else
                        temp <<= 1;
                    a <<= 1;
                }
                table[i] = temp;
            }
            for (int i = 0; i < bytes.Length; ++i)
            {
                crc = (ushort)((crc << 8) ^ table[((crc >> 8) ^ (0xff & bytes[i]))]);
            }
            return crc;
        }
        public static ushort CRC16CCITT(byte[] bytes)
        {
            const ushort poly = 4129;
            ushort[] table = new ushort[256];
            ushort initialValue = 0xffff;
            ushort temp, a;
            ushort crc = initialValue;
            for (int i = 0; i < table.Length; ++i)
            {
                temp = 0;
                a = (ushort)(i << 8);
                for (int j = 0; j < 8; ++j)
                {
                    if (((temp ^ a) & 0x8000) != 0)
                        temp = (ushort)((temp << 1) ^ poly);
                    else
                        temp <<= 1;
                    a <<= 1;
                }
                table[i] = temp;
            }
            for (int i = 0; i < bytes.Length; ++i)
            {
                crc = (ushort)((crc << 8) ^ table[((crc >> 8) ^ (0xff & bytes[i]))]);
            }
            return crc;
        }
    }

    public static class CRC16_ARC
    {
        static UInt16[] crctab = {
            0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241,
            0xc601, 0x06c0, 0x0780, 0xc741, 0x0500, 0xc5c1, 0xc481, 0x0440,
            0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40,
            0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841,
            0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81, 0x1a40,
            0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41,
            0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641,
            0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040,
            0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240,
            0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441,
            0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41,
            0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840,
            0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41,
            0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40,
            0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640,
            0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041,
            0xa001, 0x60c0, 0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240,
            0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441,
            0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41,
            0xaa01, 0x6ac0, 0x6b80, 0xab41, 0x6900, 0xa9c1, 0xa881, 0x6840,
            0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41,
            0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40,
            0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1, 0xb681, 0x7640,
            0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041,
            0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241,
            0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440,
            0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40,
            0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841,
            0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40,
            0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41,
            0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
            0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
        };

        public static int CalcCRC(byte[] bArray)
        {
            int crc = 0x0000;
            foreach (byte b in bArray)
            {
                crc = (crc >> 8) ^ crctab[(crc ^ b) & 0xff];
            }
            return crc;
        }
    }
}
